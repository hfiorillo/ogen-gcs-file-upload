// Code generated by ogen, DO NOT EDIT.

package fileupload

import (
	"net/url"
	"time"

	ht "github.com/ogen-go/ogen/http"
)

type BasicAuth struct {
	Username string
	Password string
}

// GetUsername returns the value of Username.
func (s *BasicAuth) GetUsername() string {
	return s.Username
}

// GetPassword returns the value of Password.
func (s *BasicAuth) GetPassword() string {
	return s.Password
}

// SetUsername sets the value of Username.
func (s *BasicAuth) SetUsername(val string) {
	s.Username = val
}

// SetPassword sets the value of Password.
func (s *BasicAuth) SetPassword(val string) {
	s.Password = val
}

// Ref: #/components/schemas/Error
type Error struct {
	Error            string    `json:"error"`
	ErrorDescription OptString `json:"error_description"`
	Timestamp        time.Time `json:"timestamp"`
}

// GetError returns the value of Error.
func (s *Error) GetError() string {
	return s.Error
}

// GetErrorDescription returns the value of ErrorDescription.
func (s *Error) GetErrorDescription() OptString {
	return s.ErrorDescription
}

// GetTimestamp returns the value of Timestamp.
func (s *Error) GetTimestamp() time.Time {
	return s.Timestamp
}

// SetError sets the value of Error.
func (s *Error) SetError(val string) {
	s.Error = val
}

// SetErrorDescription sets the value of ErrorDescription.
func (s *Error) SetErrorDescription(val OptString) {
	s.ErrorDescription = val
}

// SetTimestamp sets the value of Timestamp.
func (s *Error) SetTimestamp(val time.Time) {
	s.Timestamp = val
}

// NewOptDateTime returns new OptDateTime with value set to v.
func NewOptDateTime(v time.Time) OptDateTime {
	return OptDateTime{
		Value: v,
		Set:   true,
	}
}

// OptDateTime is optional time.Time.
type OptDateTime struct {
	Value time.Time
	Set   bool
}

// IsSet returns true if OptDateTime was set.
func (o OptDateTime) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptDateTime) Reset() {
	var v time.Time
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptDateTime) SetTo(v time.Time) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptDateTime) Get() (v time.Time, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptDateTime) Or(d time.Time) time.Time {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptInt64 returns new OptInt64 with value set to v.
func NewOptInt64(v int64) OptInt64 {
	return OptInt64{
		Value: v,
		Set:   true,
	}
}

// OptInt64 is optional int64.
type OptInt64 struct {
	Value int64
	Set   bool
}

// IsSet returns true if OptInt64 was set.
func (o OptInt64) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptInt64) Reset() {
	var v int64
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptInt64) SetTo(v int64) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptInt64) Get() (v int64, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptInt64) Or(d int64) int64 {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptString returns new OptString with value set to v.
func NewOptString(v string) OptString {
	return OptString{
		Value: v,
		Set:   true,
	}
}

// OptString is optional string.
type OptString struct {
	Value string
	Set   bool
}

// IsSet returns true if OptString was set.
func (o OptString) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptString) Reset() {
	var v string
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptString) SetTo(v string) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptString) Get() (v string, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptString) Or(d string) string {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptURI returns new OptURI with value set to v.
func NewOptURI(v url.URL) OptURI {
	return OptURI{
		Value: v,
		Set:   true,
	}
}

// OptURI is optional url.URL.
type OptURI struct {
	Value url.URL
	Set   bool
}

// IsSet returns true if OptURI was set.
func (o OptURI) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptURI) Reset() {
	var v url.URL
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptURI) SetTo(v url.URL) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptURI) Get() (v url.URL, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptURI) Or(d url.URL) url.URL {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

type UploadFileBadRequest Error

func (*UploadFileBadRequest) uploadFileRes() {}

type UploadFileInternalServerError Error

func (*UploadFileInternalServerError) uploadFileRes() {}

type UploadFileReq struct {
	// File to upload.
	File ht.MultipartFile `json:"file"`
}

// GetFile returns the value of File.
func (s *UploadFileReq) GetFile() ht.MultipartFile {
	return s.File
}

// SetFile sets the value of File.
func (s *UploadFileReq) SetFile(val ht.MultipartFile) {
	s.File = val
}

type UploadFileUnauthorized Error

func (*UploadFileUnauthorized) uploadFileRes() {}

// Ref: #/components/schemas/UploadResponse
type UploadResponse struct {
	Filename   OptString   `json:"filename"`
	Size       OptInt64    `json:"size"`
	GcsPath    OptURI      `json:"gcs_path"`
	UploadedAt OptDateTime `json:"uploaded_at"`
}

// GetFilename returns the value of Filename.
func (s *UploadResponse) GetFilename() OptString {
	return s.Filename
}

// GetSize returns the value of Size.
func (s *UploadResponse) GetSize() OptInt64 {
	return s.Size
}

// GetGcsPath returns the value of GcsPath.
func (s *UploadResponse) GetGcsPath() OptURI {
	return s.GcsPath
}

// GetUploadedAt returns the value of UploadedAt.
func (s *UploadResponse) GetUploadedAt() OptDateTime {
	return s.UploadedAt
}

// SetFilename sets the value of Filename.
func (s *UploadResponse) SetFilename(val OptString) {
	s.Filename = val
}

// SetSize sets the value of Size.
func (s *UploadResponse) SetSize(val OptInt64) {
	s.Size = val
}

// SetGcsPath sets the value of GcsPath.
func (s *UploadResponse) SetGcsPath(val OptURI) {
	s.GcsPath = val
}

// SetUploadedAt sets the value of UploadedAt.
func (s *UploadResponse) SetUploadedAt(val OptDateTime) {
	s.UploadedAt = val
}

// UploadResponseHeaders wraps UploadResponse with response headers.
type UploadResponseHeaders struct {
	AccessControlAllowOrigin OptString
	Response                 UploadResponse
}

// GetAccessControlAllowOrigin returns the value of AccessControlAllowOrigin.
func (s *UploadResponseHeaders) GetAccessControlAllowOrigin() OptString {
	return s.AccessControlAllowOrigin
}

// GetResponse returns the value of Response.
func (s *UploadResponseHeaders) GetResponse() UploadResponse {
	return s.Response
}

// SetAccessControlAllowOrigin sets the value of AccessControlAllowOrigin.
func (s *UploadResponseHeaders) SetAccessControlAllowOrigin(val OptString) {
	s.AccessControlAllowOrigin = val
}

// SetResponse sets the value of Response.
func (s *UploadResponseHeaders) SetResponse(val UploadResponse) {
	s.Response = val
}

func (*UploadResponseHeaders) uploadFileRes() {}
