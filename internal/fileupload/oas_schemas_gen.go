// Code generated by ogen, DO NOT EDIT.

package fileupload

import (
	"fmt"
	"time"

	ht "github.com/ogen-go/ogen/http"
)

func (s *ErrorStatusCodeWithHeaders) Error() string {
	return fmt.Sprintf("code %d: %+v", s.StatusCode, s.Response)
}

type BasicAuth struct {
	Username string
	Password string
}

// GetUsername returns the value of Username.
func (s *BasicAuth) GetUsername() string {
	return s.Username
}

// GetPassword returns the value of Password.
func (s *BasicAuth) GetPassword() string {
	return s.Password
}

// SetUsername sets the value of Username.
func (s *BasicAuth) SetUsername(val string) {
	s.Username = val
}

// SetPassword sets the value of Password.
func (s *BasicAuth) SetPassword(val string) {
	s.Password = val
}

// Ref: #/components/schemas/Error
type Error struct {
	// HTTP status code.
	Code int32 `json:"code"`
	// Error message.
	Message string `json:"message"`
	// Additional error details if available.
	Details []string `json:"details"`
}

// GetCode returns the value of Code.
func (s *Error) GetCode() int32 {
	return s.Code
}

// GetMessage returns the value of Message.
func (s *Error) GetMessage() string {
	return s.Message
}

// GetDetails returns the value of Details.
func (s *Error) GetDetails() []string {
	return s.Details
}

// SetCode sets the value of Code.
func (s *Error) SetCode(val int32) {
	s.Code = val
}

// SetMessage sets the value of Message.
func (s *Error) SetMessage(val string) {
	s.Message = val
}

// SetDetails sets the value of Details.
func (s *Error) SetDetails(val []string) {
	s.Details = val
}

// ErrorStatusCodeWithHeaders wraps Error with status code and response headers.
type ErrorStatusCodeWithHeaders struct {
	StatusCode               int
	AccessControlAllowOrigin OptString
	Response                 Error
}

// GetStatusCode returns the value of StatusCode.
func (s *ErrorStatusCodeWithHeaders) GetStatusCode() int {
	return s.StatusCode
}

// GetAccessControlAllowOrigin returns the value of AccessControlAllowOrigin.
func (s *ErrorStatusCodeWithHeaders) GetAccessControlAllowOrigin() OptString {
	return s.AccessControlAllowOrigin
}

// GetResponse returns the value of Response.
func (s *ErrorStatusCodeWithHeaders) GetResponse() Error {
	return s.Response
}

// SetStatusCode sets the value of StatusCode.
func (s *ErrorStatusCodeWithHeaders) SetStatusCode(val int) {
	s.StatusCode = val
}

// SetAccessControlAllowOrigin sets the value of AccessControlAllowOrigin.
func (s *ErrorStatusCodeWithHeaders) SetAccessControlAllowOrigin(val OptString) {
	s.AccessControlAllowOrigin = val
}

// SetResponse sets the value of Response.
func (s *ErrorStatusCodeWithHeaders) SetResponse(val Error) {
	s.Response = val
}

// NewOptString returns new OptString with value set to v.
func NewOptString(v string) OptString {
	return OptString{
		Value: v,
		Set:   true,
	}
}

// OptString is optional string.
type OptString struct {
	Value string
	Set   bool
}

// IsSet returns true if OptString was set.
func (o OptString) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptString) Reset() {
	var v string
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptString) SetTo(v string) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptString) Get() (v string, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptString) Or(d string) string {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

type UploadFileBadRequest Error

func (*UploadFileBadRequest) uploadFileRes() {}

type UploadFileInternalServerError Error

func (*UploadFileInternalServerError) uploadFileRes() {}

type UploadFileReq struct {
	// Spreadsheet file to upload (CSV or XLSX).
	File ht.MultipartFile `json:"file"`
}

// GetFile returns the value of File.
func (s *UploadFileReq) GetFile() ht.MultipartFile {
	return s.File
}

// SetFile sets the value of File.
func (s *UploadFileReq) SetFile(val ht.MultipartFile) {
	s.File = val
}

type UploadFileUnauthorized Error

func (*UploadFileUnauthorized) uploadFileRes() {}

// Ref: #/components/schemas/UploadResponse
type UploadResponse struct {
	// Name of the uploaded file.
	Filename string `json:"filename"`
	// Size of the uploaded file in bytes.
	FileSize int64 `json:"fileSize"`
	// GCS bucket where the file was stored.
	Bucket string `json:"bucket"`
	// GCS Path.
	Gcspath OptString `json:"gcspath"`
	// Timestamp when the file was uploaded.
	UploadTime time.Time `json:"uploadTime"`
}

// GetFilename returns the value of Filename.
func (s *UploadResponse) GetFilename() string {
	return s.Filename
}

// GetFileSize returns the value of FileSize.
func (s *UploadResponse) GetFileSize() int64 {
	return s.FileSize
}

// GetBucket returns the value of Bucket.
func (s *UploadResponse) GetBucket() string {
	return s.Bucket
}

// GetGcspath returns the value of Gcspath.
func (s *UploadResponse) GetGcspath() OptString {
	return s.Gcspath
}

// GetUploadTime returns the value of UploadTime.
func (s *UploadResponse) GetUploadTime() time.Time {
	return s.UploadTime
}

// SetFilename sets the value of Filename.
func (s *UploadResponse) SetFilename(val string) {
	s.Filename = val
}

// SetFileSize sets the value of FileSize.
func (s *UploadResponse) SetFileSize(val int64) {
	s.FileSize = val
}

// SetBucket sets the value of Bucket.
func (s *UploadResponse) SetBucket(val string) {
	s.Bucket = val
}

// SetGcspath sets the value of Gcspath.
func (s *UploadResponse) SetGcspath(val OptString) {
	s.Gcspath = val
}

// SetUploadTime sets the value of UploadTime.
func (s *UploadResponse) SetUploadTime(val time.Time) {
	s.UploadTime = val
}

// UploadResponseHeaders wraps UploadResponse with response headers.
type UploadResponseHeaders struct {
	AccessControlAllowOrigin OptString
	Response                 UploadResponse
}

// GetAccessControlAllowOrigin returns the value of AccessControlAllowOrigin.
func (s *UploadResponseHeaders) GetAccessControlAllowOrigin() OptString {
	return s.AccessControlAllowOrigin
}

// GetResponse returns the value of Response.
func (s *UploadResponseHeaders) GetResponse() UploadResponse {
	return s.Response
}

// SetAccessControlAllowOrigin sets the value of AccessControlAllowOrigin.
func (s *UploadResponseHeaders) SetAccessControlAllowOrigin(val OptString) {
	s.AccessControlAllowOrigin = val
}

// SetResponse sets the value of Response.
func (s *UploadResponseHeaders) SetResponse(val UploadResponse) {
	s.Response = val
}

func (*UploadResponseHeaders) uploadFileRes() {}
